{"repository_name":"github.com/vladfaust/mini_redis","body":"# MiniRedis\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/com/vladfaust/mini_redis/master.svg?style=flat-square)](https://travis-ci.com/vladfaust/mini_redis)\n[![API Docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://github.vladfaust.com/mini_redis)\n[![Releases](https://img.shields.io/github/release/vladfaust/mini_redis.svg?style=flat-square)](https://github.com/vladfaust/mini_redis/releases)\n[![Awesome](https://awesome.re/badge-flat2.svg)](https://github.com/veelenga/awesome-crystal)\n[![vladfaust.com](https://img.shields.io/badge/style-.com-lightgrey.svg?longCache=true&style=flat-square&label=vladfaust&colorB=0a83d8)](https://vladfaust.com)\n[![Patrons count](https://img.shields.io/badge/dynamic/json.svg?label=patrons&url=https://www.patreon.com/api/user/11296360&query=$.included[0].attributes.patron_count&style=flat-square&colorB=red&maxAge=86400)](https://www.patreon.com/vladfaust)\n[![Gitter chat](https://img.shields.io/badge/chat%20on-gitter-green.svg?colorB=ED1965&logo=gitter&style=flat-square)](https://gitter.im/vladfaust/Lobby)\n\nA light-weight Redis client for [Crystal](https://crystal-lang.org/).\n\n[![Become Patron](https://vladfaust.com/img/patreon-small.svg)](https://www.patreon.com/vladfaust)\n\n## About\n\nMiniRedis is a light-weight low-level alternative to existing Redis client implementations.\n\nIn comparison with [crystal-redis](https://github.com/stefanwille/crystal-redis), MiniRedis has lesser memory consumption, built-in logging and first-class support for raw bytes. It also doesn't need to be updated with every Redis release.\n\nOn the other hand, MiniRedis doesn't have commands API (i.e. instead of `redis.ping` you should write `redis.send(\"PING\")`). However, such a low-level interface terminates the dependency on the third-party client maintainer (i.e. me), which makes it a perfect fit to use within a shard.\n\nYou can always find the actual Redis commands API at <https://redis.io/commands>.\n\n### Benchmarks\n\nBenchmarks code can be found at <https://github.com/vladfaust/mini_redis-benchmarks>.\nThese are recent results of comparison MiniRedis with [crystal-redis](https://github.com/stefanwille/crystal-redis).\n\n#### `send` benchmarks\n\n```sh\n> env REDIS_URL=redis://localhost:6379/1 crystal src/send.cr --release\nmini_redis     13.4k ( 74.62µs) (± 2.50%)   32 B/op        fastest\ncrystal-redis  13.36k ( 74.83µs) (± 2.97%)  144 B/op   1.00× slower\n```\n\n**Conclusion:** `mini_redis` is more memory-efficient.\n\n#### Pipeline mode benchmarks\n\n1 million pipelined `send`s, average from 30 times repeats:\n\n```sh\n> env REDIS_URL=redis://localhost:6379/1 crystal src/pipeline.cr --release\nmini_redis    914.569ms 1.093M ops/s\ncrystal-redis 908.182ms 1.101M ops/s\n```\n\n**Conclusion:** `mini_redis` has almost the same speed as `crystal-redis`.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  mini_redis:\n    github: vladfaust/mini_redis\n    version: ~> 0.2.0\n```\n\n2. Run `shards install`\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/vladfaust/timer.cr/releases) and change the `version` accordingly. Note that until Crystal is officially released, this shard would be in beta state (`0.*.*`), with every **minor** release considered breaking. For example, `0.1.0` → `0.2.0` is breaking and `0.1.0` → `0.1.1` is not.\n\n## Usage\n\n```crystal\nrequire \"mini_redis\"\n\nredis = MiniRedis.new\n\n# MiniRedis responses wrap `Int64 | String | Bytes | Nil | Array(Value)` values,\n# which map to `Integer`, `Simple String`, `Bulk String`, `Nil` and `Array` Redis values\n\n# SET command returns `Simple String`, which is `String` in Crystal\npp redis.send(\"SET\", \"foo\", \"bar\").raw.as(String) # => \"OK\"\n\n# GET command returns `Bulk String`, which is `Bytes` in Crystal\nbytes = redis.send(\"GET\", \"foo\").raw.as(Bytes)\npp String.new(bytes) # => \"bar\"\n\n# Bytes command payloads are also supported\nredis.send(\"set\", \"foo\".to_slice, \"bar\".to_slice)\n```\n\n### Pipelining\n\n```crystal\nresponse = redis.pipeline do |pipe|\n  # WARNING: Accessing the `.send` return value\n  # within the pipe block would crash the program!\n  pipe.send(\"SET\", \"foo\", \"bar\")\nend\n\npp typeof(response) # => [MiniRedis::Value(@raw=\"OK\")]\n```\n\n### Transactions\n\n```crystal\nresponse = redis.transaction do |tx|\n  pp tx.send(\"SET\", \"foo\", \"bar\").raw.as(String) # => \"QUEUED\"\nend\n\npp typeof(response) # => MiniRedis::Value(@raw=[MiniRedis::Value(@raw=\"OK\")])\n```\n\n### Connection pool\n\n```crystal\npool = MiniRedis::Pool.new\n\nresponse = pool.get do |redis|\n  # Redis is MiniRedis instance, can do anything\n  redis.send(\"PING\")\nend\n\n# Return value equals to the block's\npp response.raw.as(String) # => \"PONG\"\n\nconn = pool.get\npp conn.send(\"PING\").raw.as(String) # => \"PONG\"\npool.release(conn) # Do not forget to put it back!\n```\n\n## Development\n\n`env REDIS_URL=redis://localhost:6379 crystal spec` and you're good to go.\n\n## Contributing\n\n1. Fork it (<https://github.com/vladfaust/mini_redis/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'feat: new feature'`) using [angular-style commits](https://docs.onyxframework.org/contributing/commit-style)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n","program":{"html_id":"github.com/vladfaust/mini_redis/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/vladfaust/mini_redis","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/mini_redis/MiniRedis","path":"MiniRedis.html","kind":"class","full_name":"MiniRedis","name":"MiniRedis","abstract":false,"superclass":{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/mini_redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mini_redis/errors.cr","line_number":1,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/errors.cr"},{"filename":"mini_redis/pool.cr","line_number":1,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr"},{"filename":"mini_redis/value.cr","line_number":1,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/value.cr"},{"filename":"mini_redis.cr","line_number":8,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr"}],"repository_name":"github.com/vladfaust/mini_redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A light-weight low-level Redis client.","summary":"<p>A light-weight low-level Redis client.</p>","class_methods":[],"constructors":[{"id":"new(uri:URI=URI.parse(&quot;redis://localhost:6379&quot;),logger:Logger?=nil,logger_severity:Logger::Severity=Logger::Severity::INFO,dns_timeout:Time::Span?=5.seconds,connect_timeout:Time::Span?=5.seconds,read_timeout:Time::Span?=nil,write_timeout:Time::Span?=5.seconds)-class-method","html_id":"new(uri:URI=URI.parse(&amp;quot;redis://localhost:6379&amp;quot;),logger:Logger?=nil,logger_severity:Logger::Severity=Logger::Severity::INFO,dns_timeout:Time::Span?=5.seconds,connect_timeout:Time::Span?=5.seconds,read_timeout:Time::Span?=nil,write_timeout:Time::Span?=5.seconds)-class-method","name":"new","doc":"Initialize with Redis *uri* and optional *logger*.\nThe *logger* would log outcoming commands with *logger_severity* level.\n\n```\nredis = MiniRedis.new(URI.parse(ENV[\"REDIS_URL\"]), logger: Logger.new(STDOUT))\n```","summary":"<p>Initialize with Redis <em>uri</em> and optional <em>logger</em>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"URI.parse(\"redis://localhost:6379\")","external_name":"uri","restriction":"URI"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"Logger::Severity::INFO","external_name":"logger_severity","restriction":"Logger::Severity"},{"name":"dns_timeout","doc":null,"default_value":"5.seconds","external_name":"dns_timeout","restriction":"Time::Span | ::Nil"},{"name":"connect_timeout","doc":null,"default_value":"5.seconds","external_name":"connect_timeout","restriction":"Time::Span | ::Nil"},{"name":"read_timeout","doc":null,"default_value":"nil","external_name":"read_timeout","restriction":"Time::Span | ::Nil"},{"name":"write_timeout","doc":null,"default_value":"5.seconds","external_name":"write_timeout","restriction":"Time::Span | ::Nil"}],"args_string":"(uri : URI = <span class=\"t\">URI</span>.parse(<span class=\"s\">&quot;redis://localhost:6379&quot;</span>), logger : Logger? = <span class=\"n\">nil</span>, logger_severity : Logger::Severity = <span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">INFO</span>, dns_timeout : Time::Span? = <span class=\"n\">5</span>.seconds, connect_timeout : Time::Span? = <span class=\"n\">5</span>.seconds, read_timeout : Time::Span? = <span class=\"n\">nil</span>, write_timeout : Time::Span? = <span class=\"n\">5</span>.seconds)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L15","def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"URI.parse(\"redis://localhost:6379\")","external_name":"uri","restriction":"URI"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"Logger::Severity::INFO","external_name":"logger_severity","restriction":"Logger::Severity"},{"name":"dns_timeout","doc":null,"default_value":"5.seconds","external_name":"dns_timeout","restriction":"Time::Span | ::Nil"},{"name":"connect_timeout","doc":null,"default_value":"5.seconds","external_name":"connect_timeout","restriction":"Time::Span | ::Nil"},{"name":"read_timeout","doc":null,"default_value":"nil","external_name":"read_timeout","restriction":"Time::Span | ::Nil"},{"name":"write_timeout","doc":null,"default_value":"5.seconds","external_name":"write_timeout","restriction":"Time::Span | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"socket = TCPSocket.new(host: uri.host.not_nil!, port: uri.port.not_nil!, dns_timeout: dns_timeout, connect_timeout: connect_timeout)\nsocket.sync = false\nsocket.read_timeout = read_timeout\nsocket.write_timeout = write_timeout\nnew(socket, logger, logger_severity)\n"}},{"id":"new(socket:Socket,logger:Logger?=nil,logger_severity:Logger::Severity=Logger::Severity::INFO)-class-method","html_id":"new(socket:Socket,logger:Logger?=nil,logger_severity:Logger::Severity=Logger::Severity::INFO)-class-method","name":"new","doc":"Initialize with raw Crystal `Socket` and optional *logger*.\nThe *logger* would log outcoming commands with *logger_severity* level.","summary":"<p>Initialize with raw Crystal <code>Socket</code> and optional <em>logger</em>.</p>","abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"Socket"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"Logger::Severity::INFO","external_name":"logger_severity","restriction":"Logger::Severity"}],"args_string":"(socket : Socket, logger : Logger? = <span class=\"n\">nil</span>, logger_severity : Logger::Severity = <span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">INFO</span>)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L42","def":{"name":"new","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"Socket"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"Logger::Severity::INFO","external_name":"logger_severity","restriction":"Logger::Severity"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(socket, logger, logger_severity)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":null,"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if socket == other.socket\nelse\n  return false\nend\ntrue\n"}},{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Close the underlying socket.","summary":"<p>Close the underlying socket.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L55","def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket.close"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","source_link":null,"def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = socket.hash(hasher)\nhasher\n"}},{"id":"logger:Logger?-instance-method","html_id":"logger:Logger?-instance-method","name":"logger","doc":"The logger which logs commands.","summary":"<p>The logger which logs commands.</p>","abstract":false,"args":[],"args_string":" : Logger?","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L71","def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Logger | ::Nil","visibility":"Public","body":"@logger"}},{"id":"logger=(logger:Logger?)-instance-method","html_id":"logger=(logger:Logger?)-instance-method","name":"logger=","doc":"The logger which logs commands.","summary":"<p>The logger which logs commands.</p>","abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"Logger | ::Nil"}],"args_string":"(logger : Logger?)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L75","def":{"name":"logger=","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"Logger | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger = logger"}},{"id":"logger_severity:Logger::Severity-instance-method","html_id":"logger_severity:Logger::Severity-instance-method","name":"logger_severity","doc":"The `#logger` severity.","summary":"<p>The <code><a href=\"MiniRedis.html#logger%3ALogger%3F-instance-method\">#logger</a></code> severity.</p>","abstract":false,"args":[],"args_string":" : Logger::Severity","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L74","def":{"name":"logger_severity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Logger::Severity","visibility":"Public","body":"@logger_severity"}},{"id":"logger_severity=(logger_severity:Logger::Severity)-instance-method","html_id":"logger_severity=(logger_severity:Logger::Severity)-instance-method","name":"logger_severity=","doc":"The `#logger` severity.","summary":"<p>The <code><a href=\"MiniRedis.html#logger%3ALogger%3F-instance-method\">#logger</a></code> severity.</p>","abstract":false,"args":[{"name":"logger_severity","doc":null,"default_value":"","external_name":"logger_severity","restriction":"Logger::Severity"}],"args_string":"(logger_severity : Logger::Severity)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L78","def":{"name":"logger_severity=","args":[{"name":"logger_severity","doc":null,"default_value":"","external_name":"logger_severity","restriction":"Logger::Severity"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger_severity = logger_severity"}},{"id":"pipeline(&block:self->):Array(Value)-instance-method","html_id":"pipeline(&amp;block:self-&gt;):Array(Value)-instance-method","name":"pipeline","doc":"Yield `self`, accumulate requests and then flush them all in one moment.\nSee [Pipelining docs](https://redis.io/topics/pipelining).\n\nIt returns an `Array` of `Value`s.\n\n```\nresponse = redis.pipeline do |pipe|\n  # WARNING: Do not try to access its return value while\n  # within the pipeline block. See the explaination below\n  pipe.send(\"PING\")\nend\n\npp response # => Array([MiniRedis::Value(@raw=\"PONG\")])\n```\n\nWARNING: `#send` returns an `uninitalized Value` when in pipeline mode.\nTrying to access it would crash the program. Use `#pipeline?` if you want to be sure.\n\n```\n# When you're not sure about the `redis` type...\n\n# Wrong ✖️\nputs redis.send(\"PING\") # May crash with `Invalid memory access`\n\n# Right ✔️\nunless redis.pipeline?\n  puts redis.send(\"PING\")\nend\n```","summary":"<p>Yield <code>self</code>, accumulate requests and then flush them all in one moment.</p>","abstract":false,"args":[],"args_string":"(&block : <span class=\"k\">self</span> -> ) : Array(Value)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L128","def":{"name":"pipeline","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(self -> )"},"return_type":"Array(Value)","visibility":"Public","body":"@pipeline = true\n@queued = 0\nyield self\n@socket.flush\n@pipeline = false\n@queued.times.reduce(Array(Value).new(@queued)) do |ary|\n  ary << receive\nend\n"}},{"id":"pipeline?:Bool-instance-method","html_id":"pipeline?:Bool-instance-method","name":"pipeline?","doc":"Whether is current connection in pipeline mode. See `#pipeline`.","summary":"<p>Whether is current connection in pipeline mode.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L68","def":{"name":"pipeline?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@pipeline"}},{"id":"send(commands:Enumerable):Value-instance-method","html_id":"send(commands:Enumerable):Value-instance-method","name":"send","doc":"Send the *commands* marshalled according to the [Redis Protocol Specification](https://redis.io/topics/protocol).\n\n```\nredis.send(\"PING\")       # MiniRedis::Value(@raw=\"PONG\")\nredis.send(\"GET\", \"foo\") # MiniRedis::Value(@raw=Bytes)\n```","summary":"<p>Send the <em>commands</em> marshalled according to the <a href=\"https://redis.io/topics/protocol\" target=\"_blank\">Redis Protocol Specification</a>.</p>","abstract":false,"args":[{"name":"commands","doc":null,"default_value":"","external_name":"commands","restriction":"Enumerable"}],"args_string":"(commands : Enumerable) : Value","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L80","def":{"name":"send","args":[{"name":"commands","doc":null,"default_value":"","external_name":"commands","restriction":"Enumerable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Value","visibility":"Public","body":"log(commands)\n((@socket << \"*\") << commands.size) << \"\\r\\n\"\ncommands.each do |command|\n  marshal(command, @socket)\nend\nsend_impl\n"}},{"id":"send(*commands):Value?-instance-method","html_id":"send(*commands):Value?-instance-method","name":"send","doc":"Send the *commands* marshalled according to the [Redis Protocol Specification](https://redis.io/topics/protocol).\n\n```\nredis.send(\"PING\")       # MiniRedis::Value(@raw=\"PONG\")\nredis.send(\"GET\", \"foo\") # MiniRedis::Value(@raw=Bytes)\n```","summary":"<p>Send the <em>commands</em> marshalled according to the <a href=\"https://redis.io/topics/protocol\" target=\"_blank\">Redis Protocol Specification</a>.</p>","abstract":false,"args":[{"name":"commands","doc":null,"default_value":"","external_name":"commands","restriction":""}],"args_string":"(*commands) : Value?","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L93","def":{"name":"send","args":[{"name":"commands","doc":null,"default_value":"","external_name":"commands","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Value | Nil","visibility":"Public","body":"send(commands)"}},{"id":"socket:Socket-instance-method","html_id":"socket:Socket-instance-method","name":"socket","doc":"The underlying socket.","summary":"<p>The underlying socket.</p>","abstract":false,"args":[],"args_string":" : Socket","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L60","def":{"name":"socket","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket"}},{"id":"transaction(&block:self->):Value-instance-method","html_id":"transaction(&amp;block:self-&gt;):Value-instance-method","name":"transaction","doc":"Send `\"MULTI\"` command, yield `self` and then send `\"EXEC\"` command.\nSee [Transactions docs](https://redis.io/topics/transactions).\n\nIt returns a `Value` containing an `Array` of `Value`s.\n\n```\nresponse = redis.transaction do |tx|\n  pp tx.send(\"SET\", \"foo\", \"bar\") # => MiniRedis::Value(@raw=\"QUEUED\")\nend\n\npp response # => MiniRedis::Value(@raw=[MiniRedis::Value(@raw=Bytes)])\n```","summary":"<p>Send <code>\"MULTI\"</code> command, yield <code>self</code> and then send <code>\"EXEC\"</code> command.</p>","abstract":false,"args":[],"args_string":"(&block : <span class=\"k\">self</span> -> ) : Value","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L154","def":{"name":"transaction","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(self -> )"},"return_type":"Value","visibility":"Public","body":"send(\"MULTI\")\n@transaction = true\nyield self\n@transaction = false\nsend(\"EXEC\")\n"}},{"id":"transaction?:Bool-instance-method","html_id":"transaction?:Bool-instance-method","name":"transaction?","doc":"Whether is current connection in transaction mode. See `#transaction`.","summary":"<p>Whether is current connection in transaction mode.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis.cr#L65","def":{"name":"transaction?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@transaction"}}],"macros":[],"types":[{"html_id":"github.com/vladfaust/mini_redis/MiniRedis/ConnectionError","path":"MiniRedis/ConnectionError.html","kind":"class","full_name":"MiniRedis::ConnectionError","name":"ConnectionError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/mini_redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/mini_redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/mini_redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mini_redis/errors.cr","line_number":7,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/errors.cr"}],"repository_name":"github.com/vladfaust/mini_redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/mini_redis/MiniRedis","kind":"class","full_name":"MiniRedis","name":"MiniRedis"},"doc":"A error which is raised when something's wrong with Redis connection.","summary":"<p>A error which is raised when something's wrong with Redis connection.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/mini_redis/MiniRedis/Error","path":"MiniRedis/Error.html","kind":"class","full_name":"MiniRedis::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/vladfaust/mini_redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/mini_redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/mini_redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mini_redis/errors.cr","line_number":3,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/errors.cr"}],"repository_name":"github.com/vladfaust/mini_redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/mini_redis/MiniRedis","kind":"class","full_name":"MiniRedis","name":"MiniRedis"},"doc":"A error which is raised in case when a error is read from Redis response.","summary":"<p>A error which is raised in case when a error is read from Redis response.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/mini_redis/MiniRedis/Pool","path":"MiniRedis/Pool.html","kind":"class","full_name":"MiniRedis::Pool","name":"Pool","abstract":false,"superclass":{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/mini_redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mini_redis/pool.cr","line_number":3,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr"}],"repository_name":"github.com/vladfaust/mini_redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/mini_redis/MiniRedis","kind":"class","full_name":"MiniRedis","name":"MiniRedis"},"doc":"A `MiniRedis` connection pool. It has dynamic `#capacity` and `#block` values.","summary":"<p>A <code><a href=\"../MiniRedis.html\">MiniRedis</a></code> connection pool.</p>","class_methods":[],"constructors":[{"id":"new(uri:URI=URI.parse(&quot;redis://localhost:6379&quot;),capacity:Int32=Int32::MAX,initial_size:Int32=0,logger:Logger?=nil,logger_severity:Logger::Severity=Logger::Severity::INFO,dns_timeout:Time::Span?=5.seconds,connect_timeout:Time::Span?=5.seconds,read_timeout:Time::Span?=nil,write_timeout:Time::Span?=5.seconds)-class-method","html_id":"new(uri:URI=URI.parse(&amp;quot;redis://localhost:6379&amp;quot;),capacity:Int32=Int32::MAX,initial_size:Int32=0,logger:Logger?=nil,logger_severity:Logger::Severity=Logger::Severity::INFO,dns_timeout:Time::Span?=5.seconds,connect_timeout:Time::Span?=5.seconds,read_timeout:Time::Span?=nil,write_timeout:Time::Span?=5.seconds)-class-method","name":"new","doc":"Initialize a new pool with `#block` initializing a\n`MiniRedis` client from the *uri*.","summary":"<p>Initialize a new pool with <code><a href=\"../MiniRedis/Pool.html#block%3AProc%28MiniRedis%29-instance-method\">#block</a></code> initializing a <code><a href=\"../MiniRedis.html\">MiniRedis</a></code> client from the <em>uri</em>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"URI.parse(\"redis://localhost:6379\")","external_name":"uri","restriction":"URI"},{"name":"capacity","doc":null,"default_value":"Int32::MAX","external_name":"capacity","restriction":"Int32"},{"name":"initial_size","doc":null,"default_value":"0","external_name":"initial_size","restriction":"Int32"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"Logger::Severity::INFO","external_name":"logger_severity","restriction":"Logger::Severity"},{"name":"dns_timeout","doc":null,"default_value":"5.seconds","external_name":"dns_timeout","restriction":"Time::Span | ::Nil"},{"name":"connect_timeout","doc":null,"default_value":"5.seconds","external_name":"connect_timeout","restriction":"Time::Span | ::Nil"},{"name":"read_timeout","doc":null,"default_value":"nil","external_name":"read_timeout","restriction":"Time::Span | ::Nil"},{"name":"write_timeout","doc":null,"default_value":"5.seconds","external_name":"write_timeout","restriction":"Time::Span | ::Nil"}],"args_string":"(uri : URI = <span class=\"t\">URI</span>.parse(<span class=\"s\">&quot;redis://localhost:6379&quot;</span>), capacity : Int32 = <span class=\"t\">Int32</span><span class=\"t\">::</span><span class=\"t\">MAX</span>, initial_size : Int32 = <span class=\"n\">0</span>, logger : Logger? = <span class=\"n\">nil</span>, logger_severity : Logger::Severity = <span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">INFO</span>, dns_timeout : Time::Span? = <span class=\"n\">5</span>.seconds, connect_timeout : Time::Span? = <span class=\"n\">5</span>.seconds, read_timeout : Time::Span? = <span class=\"n\">nil</span>, write_timeout : Time::Span? = <span class=\"n\">5</span>.seconds)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L6","def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"URI.parse(\"redis://localhost:6379\")","external_name":"uri","restriction":"URI"},{"name":"capacity","doc":null,"default_value":"Int32::MAX","external_name":"capacity","restriction":"Int32"},{"name":"initial_size","doc":null,"default_value":"0","external_name":"initial_size","restriction":"Int32"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"Logger::Severity::INFO","external_name":"logger_severity","restriction":"Logger::Severity"},{"name":"dns_timeout","doc":null,"default_value":"5.seconds","external_name":"dns_timeout","restriction":"Time::Span | ::Nil"},{"name":"connect_timeout","doc":null,"default_value":"5.seconds","external_name":"connect_timeout","restriction":"Time::Span | ::Nil"},{"name":"read_timeout","doc":null,"default_value":"nil","external_name":"read_timeout","restriction":"Time::Span | ::Nil"},{"name":"write_timeout","doc":null,"default_value":"5.seconds","external_name":"write_timeout","restriction":"Time::Span | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(capacity, initial_size) do\n  MiniRedis.new(uri: uri, logger: logger, logger_severity: logger_severity, dns_timeout: dns_timeout, connect_timeout: connect_timeout, read_timeout: read_timeout, write_timeout: write_timeout)\nend"}},{"id":"new(capacity:Int32=Int32::MAX,initial_size:Int32=0,&block:->MiniRedis)-class-method","html_id":"new(capacity:Int32=Int32::MAX,initial_size:Int32=0,&amp;block:-&gt;MiniRedis)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"capacity","doc":null,"default_value":"Int32::MAX","external_name":"capacity","restriction":"Int32"},{"name":"initial_size","doc":null,"default_value":"0","external_name":"initial_size","restriction":"Int32"}],"args_string":"(capacity : Int32 = <span class=\"t\">Int32</span><span class=\"t\">::</span><span class=\"t\">MAX</span>, initial_size : Int32 = <span class=\"n\">0</span>, &block :  -> MiniRedis)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L55","def":{"name":"new","args":[{"name":"capacity","doc":null,"default_value":"Int32::MAX","external_name":"capacity","restriction":"Int32"},{"name":"initial_size","doc":null,"default_value":"0","external_name":"initial_size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> MiniRedis)"},"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(capacity, initial_size, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"block:Proc(MiniRedis)-instance-method","html_id":"block:Proc(MiniRedis)-instance-method","name":"block","doc":"The pool's block to call to initialize a new `MiniRedis` instance.\nCan be changed after the pool is initialized.","summary":"<p>The pool's block to call to initialize a new <code><a href=\"../MiniRedis.html\">MiniRedis</a></code> instance.</p>","abstract":false,"args":[],"args_string":" : Proc(MiniRedis)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L37","def":{"name":"block","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Proc(MiniRedis)","visibility":"Public","body":"@block"}},{"id":"block=(block:Proc(MiniRedis))-instance-method","html_id":"block=(block:Proc(MiniRedis))-instance-method","name":"block=","doc":"The pool's block to call to initialize a new `MiniRedis` instance.\nCan be changed after the pool is initialized.","summary":"<p>The pool's block to call to initialize a new <code><a href=\"../MiniRedis.html\">MiniRedis</a></code> instance.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(MiniRedis)"}],"args_string":"(block : Proc(MiniRedis))","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L41","def":{"name":"block=","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(MiniRedis)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@block = block"}},{"id":"capacity:Int32-instance-method","html_id":"capacity:Int32-instance-method","name":"capacity","doc":"The pool's capacity. Can be changed after the pool is initialized.","summary":"<p>The pool's capacity.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L33","def":{"name":"capacity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@capacity"}},{"id":"capacity=(capacity:Int32)-instance-method","html_id":"capacity=(capacity:Int32)-instance-method","name":"capacity=","doc":"The pool's capacity. Can be changed after the pool is initialized.","summary":"<p>The pool's capacity.</p>","abstract":false,"args":[{"name":"capacity","doc":null,"default_value":"","external_name":"capacity","restriction":"Int32"}],"args_string":"(capacity : Int32)","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L37","def":{"name":"capacity=","args":[{"name":"capacity","doc":null,"default_value":"","external_name":"capacity","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@capacity = capacity"}},{"id":"free-instance-method","html_id":"free-instance-method","name":"free","doc":"The number of free clients in this pool.","summary":"<p>The number of free clients in this pool.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L38","def":{"name":"free","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@free.size"}},{"id":"get(timeout:Time::Span?=nil,&block:MiniRedis->)-instance-method","html_id":"get(timeout:Time::Span?=nil,&amp;block:MiniRedis-&gt;)-instance-method","name":"get","doc":"Yield a free `MiniRedis` client.\nBlocks until one is available, raises `TimeoutError` on optional *timeout*.\nCalls `#release` after yield.","summary":"<p>Yield a free <code><a href=\"../MiniRedis.html\">MiniRedis</a></code> client.</p>","abstract":false,"args":[{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"}],"args_string":"(timeout : Time::Span? = <span class=\"n\">nil</span>, &block : MiniRedis -> )","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L64","def":{"name":"get","args":[{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(MiniRedis -> )"},"return_type":"","visibility":"Public","body":"begin\n  redis = get(timeout)\n  result = yield redis\n  result\nensure\n  if redis\n    release(redis)\n  end\nend"}},{"id":"get(timeout:Time::Span?=nil):MiniRedis-instance-method","html_id":"get(timeout:Time::Span?=nil):MiniRedis-instance-method","name":"get","doc":"Return a free `MiniRedis` client.\nBlocks until one is available, raises `TimeoutError` on optional *timeout*.\n\nNOTE: Do not forget to `#release` the client afterwards!","summary":"<p>Return a free <code><a href=\"../MiniRedis.html\">MiniRedis</a></code> client.</p>","abstract":false,"args":[{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"}],"args_string":"(timeout : Time::Span? = <span class=\"n\">nil</span>) : MiniRedis","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L76","def":{"name":"get","args":[{"name":"timeout","doc":null,"default_value":"nil","external_name":"timeout","restriction":"Time::Span | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MiniRedis","visibility":"Public","body":"if redis = @free.shift?\n  return redis\nelse\n  if @capacity.nil? || @used.size < @capacity.not_nil!\n    redis = @block.call\n    @used.add(redis)\n    return redis\n  else\n    if timeout\n      started_at = Time.monotonic\n      loop do\n        sleep(0.01)\n        if redis = @free.shift?\n          return redis\n        else\n          if (Time.monotonic - started_at) >= timeout\n            raise(TimeoutError.new)\n          end\n        end\n      end\n    else\n      loop do\n        sleep(0.01)\n        if redis = @free.shift?\n          return redis\n        end\n      end\n    end\n  end\nend"}},{"id":"release(redis:MiniRedis):Nil-instance-method","html_id":"release(redis:MiniRedis):Nil-instance-method","name":"release","doc":"Put the *redis* client back into the pool.","summary":"<p>Put the <em>redis</em> client back into the pool.</p>","abstract":false,"args":[{"name":"redis","doc":null,"default_value":"","external_name":"redis","restriction":"MiniRedis"}],"args_string":"(redis : MiniRedis) : Nil","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L111","def":{"name":"release","args":[{"name":"redis","doc":null,"default_value":"","external_name":"redis","restriction":"MiniRedis"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@used.delete(redis)\n@free.push(redis)\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"The total size of this pool (`#free` plus `#used`).","summary":"<p>The total size of this pool (<code><a href=\"../MiniRedis/Pool.html#free-instance-method\">#free</a></code> plus <code><a href=\"../MiniRedis/Pool.html#used-instance-method\">#used</a></code>).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L48","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"free + used"}},{"id":"used-instance-method","html_id":"used-instance-method","name":"used","doc":"The number of clients in this pool currently being used.","summary":"<p>The number of clients in this pool currently being used.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr#L43","def":{"name":"used","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@used.size"}}],"macros":[],"types":[{"html_id":"github.com/vladfaust/mini_redis/MiniRedis/Pool/TimeoutError","path":"MiniRedis/Pool/TimeoutError.html","kind":"class","full_name":"MiniRedis::Pool::TimeoutError","name":"TimeoutError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/mini_redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/mini_redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/mini_redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/mini_redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mini_redis/pool.cr","line_number":117,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/pool.cr"}],"repository_name":"github.com/vladfaust/mini_redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/mini_redis/MiniRedis/Pool","kind":"class","full_name":"MiniRedis::Pool","name":"Pool"},"doc":"Could be raised when a *timeout* argument is provided upon `#get` call.","summary":"<p>Could be raised when a <em>timeout</em> argument is provided upon <code>#get</code> call.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/vladfaust/mini_redis/MiniRedis/Value","path":"MiniRedis/Value.html","kind":"struct","full_name":"MiniRedis::Value","name":"Value","abstract":false,"superclass":{"html_id":"github.com/vladfaust/mini_redis/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/vladfaust/mini_redis/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/vladfaust/mini_redis/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/mini_redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mini_redis/value.cr","line_number":28,"url":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/value.cr"}],"repository_name":"github.com/vladfaust/mini_redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/mini_redis/MiniRedis","kind":"class","full_name":"MiniRedis","name":"MiniRedis"},"doc":"A Redis value. It's `#raw` value has a type according to [Redis Protocol Specification](https://redis.io/topics/protocol):\n\n```\n# Redis type    | First byte | Crystal type |\n# ------------- | ---------- | ------------ |\n# Simple String | `+`        | `String`     |\n# Integer       | `:`        | `Int64`      |\n# Bulk String   | `$`        | `Bytes`      |\n# Array         | `*`        | `Array`      |\n```\n\n```\nresponse = redis.transaction do |tx|\n  pp tx.send(\"SET foo bar\") # => MiniRedis::Value(@raw=\"QUEUED\")\nend\n\nresponse = String.new(response.raw.as(Array).first.raw.as(Bytes))\npp response # => \"bar\"\n\nresponse = redis.send(\"GET foo\")\nresponse = String.new(response.raw.as(Bytes))\npp response # => \"bar\"\n```\n\nReminder — do not try to directly print a `MiniRedis#send` response when in\npipeline mode! See `MiniRedis#pipeline` docs.","summary":"<p>A Redis value.</p>","class_methods":[],"constructors":[{"id":"new(raw:Int64|String|Bytes|Nil|Array(Value))-class-method","html_id":"new(raw:Int64|String|Bytes|Nil|Array(Value))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"raw","doc":null,"default_value":"","external_name":"raw","restriction":"Int64 | String | Bytes | Nil | Array(Value)"}],"args_string":"(raw : Int64 | String | Bytes | Nil | Array(Value))","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/value.cr#L31","def":{"name":"new","args":[{"name":"raw","doc":null,"default_value":"","external_name":"raw","restriction":"Int64 | String | Bytes | Nil | Array(Value)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(raw)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"raw:Array(MiniRedis::Value)|Int64|Slice(UInt8)|String|Nil-instance-method","html_id":"raw:Array(MiniRedis::Value)|Int64|Slice(UInt8)|String|Nil-instance-method","name":"raw","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(MiniRedis::Value) | Int64 | Slice(UInt8) | String | Nil","source_link":"https://github.com/vladfaust/mini_redis/blob/f610864dd840764d3c7095add537434ff9e893cb/src/mini_redis/value.cr#L29","def":{"name":"raw","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@raw"}}],"macros":[],"types":[]}]}]}}